{
    "info": {
        "name": "Getting Started - All APIs - NAB",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "let jsonData = pm.response.json();",
                                    "let id = jsonData.data[0].id;",
                                    "pm.environment.set(\"payeeId\", id);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "12 - BillPay List Payees",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "payees"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/payees"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "13 - BillPay Execute",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"payeeId\": \"{{payeeId}}\",\n    \"amount\": 33.09\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "bill-pay-request"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/bill-pay-request"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Bill Pay"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:bnpl:write"
                                },
                                {
                                    "key": "request",
                                    "value": "{\"amount\":\"123.00\",\"creditorAccount\":\"1234567890\", \"bnpl\":\"true\"}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                },
                                {
                                    "key": "authorization_account",
                                    "value": "{{psuDebtorAccountIdentification}}"
                                },
                                {
                                    "key": "authorization_bnpl_selected",
                                    "value": "true"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:bnpl:write&request={\"amount\":\"123.00\",\"creditorAccount\":\"1234567890\", \"bnpl\":\"true\"}&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}&authorization_account={{psuDebtorAccountIdentification}}&authorization_bnpl_selected=true"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Initiate bnpl payment",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"data\": {\n        \"amount\": \"123.00\",\n        \"creditorAccount\": \"1234567890\",\n        \"message\": \"Misc\"\n    }\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "bnpl-payments"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/bnpl-payments"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - BNPL"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let id = jsonData.cards[0].cardId;",
                                    "pm.environment.set(\"cardId\", id);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "18 - List Cards",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "cards"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/cards"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "19 - Card Details",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "cards",
                                "{{cardId}}"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/cards/{{cardId}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "20 - Request Card",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"action\" : \"CARD_REQUEST\"\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "cards"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/cards"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "21 - Block Card",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"reason\" : \"lost my card :(\"\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "cards",
                                "{{cardId}}",
                                "block-card-requests"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/cards/{{cardId}}/block-card-requests"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Manage Cards"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:creditoverall:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:creditoverall:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:creditoverall:write&request=openid profile bank:creditoverall:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Personal Limits",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "credit-overall",
                                "v1",
                                "personal-limits"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/credit-overall/v1/personal-limits"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.data.id;",
                                    "pm.environment.set(\"limitChangeRequestId\", accessToken);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "4 - Request a credit limit change",
                    "protocolProfileBehavior": {
                        "disabledSystemHeaders": {
                            "content-type": true
                        }
                    },
                    "request": {
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"cpfNumber\": \"27741509810\",\n  \"newLimitCreditAmount\": \"6666.00\",\n  \"currency\": \"AUD\"\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "credit-overall",
                                "v1",
                                "change-requests"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/credit-overall/v1/change-requests"
                        }
                    },
                    "response": []
                },
                {
                    "name": "5 - Get Credit Limit Request",
                    "protocolProfileBehavior": {
                        "disabledSystemHeaders": {
                            "content-type": true
                        }
                    },
                    "request": {
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json"
                            },
                            {
                                "key": "x-external-client-id",
                                "type": "text",
                                "value": "postman"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "credit-overall",
                                "v1",
                                "change-requests",
                                "{{limitChangeRequestId}}"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/credit-overall/v1/change-requests/{{limitChangeRequestId}}"
                        }
                    },
                    "response": []
                },
                {
                    "name": "6 - List all Credit Limit Requests",
                    "protocolProfileBehavior": {
                        "disabledSystemHeaders": {
                            "content-type": true
                        }
                    },
                    "request": {
                        "header": [
                            {
                                "key": "Authorization",
                                "type": "text",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "type": "text",
                                "value": "application/json"
                            },
                            {
                                "key": "x-external-client-id",
                                "type": "text",
                                "value": "postman"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "credit-overall",
                                "v1",
                                "change-requests"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/credit-overall/v1/change-requests"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Distribute Credit Limit"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "6 - Credit Score",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "credit-score"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/credit-score"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Credit Score"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let transactionId = jsonData.data.transactions[0].transactionId;",
                                    "pm.environment.set(\"transactionId\", transactionId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "4 - List transactions",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "transactions"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/transactions"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "Fraud List Reports",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "fraud-reports"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/fraud-reports"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "Fraud Submit Report",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n\n\"transactionId\" : \"{{transactionId}}\",\n\"fraudType\" : \"REPORTED_PHISHING\",\n\"reason\" : \"phising\"\n\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "fraud-reports"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/fraud-reports"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Fraud Report"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Get AccessToken",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "client_credentials"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Get FX data",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "fx",
                                "1.0.0",
                                "fx"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/fx/1.0.0/fx"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - FX"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "16 - Green Loan",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"amount\": 20000,\n    \"numberOfMonths\" : 36,\n    \"interestRate\" : 1.78,\n    \"reason\" : \"SOLAR_PANELS\"\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "green-loan-checks"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/green-loan-checks"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Green Loan"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "7 - Income Verification",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "income-verification"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/income-verification"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Income Verification"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:investmentaccounts:read"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:investmentaccounts:read"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:investmentaccounts:read&request=openid profile bank:investmentaccounts:read&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List Investment accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "investment-accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/investment-accounts"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Investment Account"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "10 - KYC",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "kyc-info"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/kyc-info"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - KYC"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Get AccessToken",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "client_credentials"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Locations - abc",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "locations",
                                "1.0.0",
                                "abcs"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/locations/1.0.0/abcs"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Locations - brc",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "locations",
                                "1.0.0",
                                "brcs"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/locations/1.0.0/brcs"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "4 - Locations - bbc",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "locations",
                                "1.0.0",
                                "bbcs"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/locations/1.0.0/bbcs"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "5 - Locations - hbc",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "locations",
                                "1.0.0",
                                "hbcs"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/locations/1.0.0/hbcs"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Locations"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "Mortgage Aff.",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"amount\": 200000,\n    \"numberOfMonths\" : 120,\n    \"interestRate\" : 1.78,\n    \"type\" : \"NORMAL\"\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "mortgage-affordability-checks"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/mortgage-affordability-checks"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Mortgage Affordability"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "17 - Open account",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"name\" : \"new account\"\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Open Account"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Get AccessToken",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "client_credentials"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Products",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "products",
                                "1.0.0",
                                "products"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/products/1.0.0/products"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Products"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "let jsonData = pm.response.json();",
                                    "let chequeId = jsonData.cheques[0].ChequeId;",
                                    "let amount = jsonData.cheques[0].Amount;",
                                    "let payeeFullName = jsonData.cheques[0].PayeeFullName;",
                                    "let chequeSerialNumber = jsonData.cheques[0].ChequeSerialNumber;",
                                    "pm.environment.set(\"chequeId\", chequeId);",
                                    "pm.environment.set(\"amount\", amount);",
                                    "pm.environment.set(\"payeeFullName\", payeeFullName);",
                                    "pm.environment.set(\"chequeSerialNumber\", chequeSerialNumber);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "4 - List Stopped Cheques",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "cheques"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/cheques"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "let jsonData = pm.response.json();",
                                    "let id = jsonData[0].ChequeId;",
                                    "pm.environment.set(\"chequeId\", id);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "5 - Stop Cheque",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "[\n    {\n        \"Amount\": {{amount}},\n        \"PayeeFullName\": \"{{payeeFullName}}\",\n        \"ChequeSerialNumber\": \"{{chequeSerialNumber}}\",\n        \"ChequeLostStolenIndicator\": \"Y\"\n    }\n]"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "stopped-cheques"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/stopped-cheques"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "6 - Get Stopped Cheque",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "stopped-cheques",
                                "{{chequeId}}"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/stopped-cheques/{{chequeId}}"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Stop Cheque"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:wealth:read bank:personalinfo:read bank:billpay:write bank:mortgageaffordability:read bank:creditscore:read bank:income:read bank:cheques:write bank:fraudreport:read bank:fraudreport:write bank:greenloan:read bank:accounts:write bank:cards:write&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "11 - Wealth Overview",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "wealth-overview"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/wealth-overview"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - NAB - Wealth Overview"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read&request=openid profile bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.1 - Get account details",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.2 - Get account balance",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "balance"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/balance"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.3 - Get balances for specific accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{accountIdUsedToRequestTransactions}}\"\n        ]\n    }\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "balances"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/balances"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let transactionId = jsonData.data.transactions[0].transactionId;",
                                    "pm.environment.set(\"transactionIdUsedToRequestDetails\", transactionId);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"transactionIdUsedToRequestDetails\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.4 - List transactions",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "transactions"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/transactions"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.4.1 - Get transaction details",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "transactions",
                                "{{transactionIdUsedToRequestDetails}}"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/transactions/{{transactionIdUsedToRequestDetails}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "4 - Get bulk balances",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "balances"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/balances"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - CDS Account"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:regular_payments:read"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:accounts.basic:read bank:regular_payments:read"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:regular_payments:read&request=openid profile bank:accounts.basic:read bank:regular_payments:read&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.1 - List direct debits",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "direct-debits"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/direct-debits"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.2 - Get direct debits for specific accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{accountIdUsedToRequestTransactions}}\"\n        ]\n    }\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "direct-debits"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/direct-debits"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Get bulk direct debits",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "direct-debits"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/direct-debits"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - CDS Direct debits"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:payees:read"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:payees:read"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:payees:read&request=openid profile bank:payees:read&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let payeeId = jsonData.data.payees[0].payeeId;",
                                    "pm.environment.set(\"payeeId\", payeeId);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"payeeId\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List payees",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "payees"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/payees"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Get payee details",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "payees",
                                "{{payeeId}}"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/payees/{{payeeId}}"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - CDS Payees"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:payment:write"
                                },
                                {
                                    "key": "request",
                                    "value": "{\"amount\":\"123.00\",\"creditorAccount\":\"1234567890\"}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                },
                                {
                                    "key": "authorization_account",
                                    "value": "{{psuDebtorAccountIdentification}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:payment:write&request={\"amount\":\"123.00\",\"creditorAccount\":\"1234567890\"}&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}&authorization_account={{psuDebtorAccountIdentification}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Initiate payment",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"data\": {\n        \"amount\": \"123.00\",\n        \"creditorAccount\": \"1234567890\",\n        \"message\": \"Misc\"\n    }\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "payments"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/payments"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - CDS Payment"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:accounts.basic:read bank:regular_payments:read"
                                },
                                {
                                    "key": "request",
                                    "value": "openid profile bank:regular_payments:read bank:accounts.basic:read"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:accounts.basic:read bank:regular_payments:read&request=openid profile bank:regular_payments:read bank:accounts.basic:read&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accountId = jsonData.data.accounts[0].accountId;",
                                    "pm.environment.set(\"accountIdUsedToRequestTransactions\", accountId);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - List accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.1 - List scheduled payments",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "accounts",
                                "{{accountIdUsedToRequestTransactions}}",
                                "payments",
                                "scheduled"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/accounts/{{accountIdUsedToRequestTransactions}}/payments/scheduled"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3.2 - Get scheduled payments for specific accounts",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{accountIdUsedToRequestTransactions}}\"\n        ]\n    }\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "payments",
                                "scheduled"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/payments/scheduled"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "4 - Get bulk scheduled payments",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "payments",
                                "scheduled"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/payments/scheduled"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - CDS Scheduled payments"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let errorCode = '';",
                                    "let redirectUri = pm.response.json().redirectUri;",
                                    "console.log(\"found redirect \"+ redirectUri)",
                                    "let splittedUri = redirectUri.split('#');",
                                    "let queryParams = splittedUri[splittedUri.length-1];",
                                    "let splittedQueryParams = queryParams.split('&');",
                                    "",
                                    "for (let i = 0; i < splittedQueryParams.length; i++) { ",
                                    "    let keyValue =  splittedQueryParams[i].split('=');",
                                    "    if (keyValue[0] === 'code') {",
                                    "        pm.environment.set('authorizationCode', keyValue[1]);",
                                    "    } else if (keyValue[0] === 'error') {",
                                    "        errorCode = keyValue[1];",
                                    "    }",
                                    "}",
                                    "",
                                    "pm.test('Location header contains no error code', function () {",
                                    "      pm.expect(errorCode).to.equal('');",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"authorizationCode\");",
                                    "",
                                    "let encoded = encodeURIComponent(pm.environment.get(\"redirectUrl\"));",
                                    "postman.setEnvironmentVariable(\"encodedRedirectUrl\", encoded);"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Create and authorize Consent programmatically",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{authorizationEndpoint}}"
                            ],
                            "query": [
                                {
                                    "key": "client_id",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "response_type",
                                    "value": "code id_token"
                                },
                                {
                                    "key": "scope",
                                    "value": "openid profile bank:payment.vrp:write"
                                },
                                {
                                    "key": "request",
                                    "value": "{\"creditorAccount\":\"1234567890\", \"controlParams\": {\n  \"ValidFromDateTime\": \"2021-08-01T23:06:53.599Z\",\n  \"ValidToDateTime\": \"2023-08-01T23:06:53.599Z\",\n  \"MaximumIndividualAmount\": {\n      \"Amount\": 200.00,\n      \"Currency\": \"AUD\"\n  },\n  \"PeriodicLimits\": [\n      {\n          \"PeriodType\": \"Week\",\n          \"PeriodAlignment\": \"Calendar\",\n          \"Amount\": \"300.00\",\n          \"Currency\": \"AUD\"\n      }\n  ]\n}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "value": "{{encodedRedirectUrl}}"
                                },
                                {
                                    "key": "state",
                                    "value": "ABC"
                                },
                                {
                                    "key": "authorization_mode",
                                    "value": "AUTO_POSTMAN"
                                },
                                {
                                    "key": "authorization_username",
                                    "value": "{{psuUsername}}"
                                },
                                {
                                    "key": "authorization_account",
                                    "value": "{{psuDebtorAccountIdentification}}"
                                }
                            ],
                            "raw": "{{authorizationEndpoint}}?client_id={{clientId}}&response_type=code id_token&scope=openid profile bank:payment.vrp:write&request={\"creditorAccount\":\"1234567890\", \"controlParams\": {\n  \"ValidFromDateTime\": \"2021-08-01T23:06:53.599Z\",\n  \"ValidToDateTime\": \"2023-08-01T23:06:53.599Z\",\n  \"MaximumIndividualAmount\": {\n      \"Amount\": 200.00,\n      \"Currency\": \"AUD\"\n  },\n  \"PeriodicLimits\": [\n      {\n          \"PeriodType\": \"Week\",\n          \"PeriodAlignment\": \"Calendar\",\n          \"Amount\": \"300.00\",\n          \"Currency\": \"AUD\"\n      }\n  ]\n}}&redirect_uri={{encodedRedirectUrl}}&state=ABC&authorization_mode=AUTO_POSTMAN&authorization_username={{psuUsername}}&authorization_account={{psuDebtorAccountIdentification}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"apiAccessToken\", accessToken);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"apiAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Exchange code for access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                },
                                {
                                    "key": "redirect_uri",
                                    "type": "text",
                                    "value": "{{redirectUrl}}"
                                },
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "authorization_code"
                                },
                                {
                                    "key": "code",
                                    "type": "text",
                                    "value": "{{authorizationCode}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Initiate payment",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            },
                            "raw": "{\n    \"data\": {\n        \"amount\": \"5.00\",\n        \"creditorAccount\": \"1234567890\",\n        \"message\": \"Misc\"\n    }\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{apiAccessToken}}"
                            },
                            {
                                "key": "x-v",
                                "type": "text",
                                "value": "1"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "cds-au",
                                "v1",
                                "banking",
                                "vrps"
                            ],
                            "raw": "{{apiUrlPrefix}}/cds-au/v1/banking/vrps"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - CDS VRP Payment"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"accessToken\", accessToken);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"accountRequestAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Retrieve access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "client_credentials"
                                },
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Information about a customer",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "customer",
                                "v2",
                                "customers",
                                "1122334455"
                            ],
                            "query": [
                                {
                                    "key": "idScheme",
                                    "value": "customerIdentificationNumber"
                                }
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/customer/v2/customers/1122334455?idScheme=customerIdentificationNumber"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Information about a business",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "customer",
                                "v2",
                                "customers",
                                "1234567890"
                            ],
                            "query": [
                                {
                                    "key": "idScheme",
                                    "value": "businessIdentificationNumber"
                                }
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/customer/v2/customers/1234567890?idScheme=businessIdentificationNumber"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - Customer - v2"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"accessToken\", accessToken);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"accountRequestAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Retrieve access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "client_credentials"
                                },
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Criteria parameters for loan illustration",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "native-loans",
                                "1.0.0",
                                "illustrations",
                                "v1",
                                "criteria",
                                "personal-loan"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/native-loans/1.0.0/illustrations/v1/criteria/personal-loan"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Loan illustration quote - Positive",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"purposeId\": \"HO\",\n    \"customerId\": \"1234567890\",\n    \"termInMonths\": 48,\n    \"amountInPence\": 750000\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "native-loans",
                                "1.0.0",
                                "illustrations",
                                "v1",
                                "quote",
                                "personal-loan"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/native-loans/1.0.0/illustrations/v1/quote/personal-loan"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Loan illustration quote - Negative",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"purposeId\": \"HO\",\n    \"customerId\": \"1234567890\",\n    \"termInMonths\": 480,\n    \"amountInPence\": 750000\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "native-loans",
                                "1.0.0",
                                "illustrations",
                                "v1",
                                "quote",
                                "personal-loan"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/native-loans/1.0.0/illustrations/v1/quote/personal-loan"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - Native loans - v1"
        },
        {
            "item": [
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let authorizationEndpoint = jsonData.authorization_endpoint;",
                                    "let tokenEndpoint = jsonData.token_endpoint;",
                                    "pm.environment.set(\"authorizationEndpoint\", authorizationEndpoint);",
                                    "pm.environment.set(\"tokenEndpoint\", tokenEndpoint);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "0 - Retrieve Well known endpoint",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "header": [],
                        "method": "GET",
                        "url": {
                            "host": [
                                "{{wellKnownEndpoint}}"
                            ],
                            "raw": "{{wellKnownEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonData = pm.response.json();",
                                    "let accessToken = jsonData.access_token;",
                                    "pm.environment.set(\"accessToken\", accessToken);",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "pm.environment.unset(\"accountRequestAccessToken\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "1 - Retrieve access token",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "key": "grant_type",
                                    "type": "text",
                                    "value": "client_credentials"
                                },
                                {
                                    "key": "client_id",
                                    "type": "text",
                                    "value": "{{clientId}}"
                                },
                                {
                                    "key": "client_secret",
                                    "type": "text",
                                    "value": "{{clientSecret}}"
                                }
                            ]
                        },
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{tokenEndpoint}}"
                            ],
                            "raw": "{{tokenEndpoint}}"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "2 - Political exposure screening for a natural person Copy",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"countryOfResidenceCode\": \"GB\",\n    \"name\": {\n      \"firstName\": \"MIKHAIL\",\n      \"surname\": \"KARPUSHIN\"\n  }\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "screening",
                                "1.0.0",
                                "politically-exposed-persons",
                                "status"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/screening/1.0.0/politically-exposed-persons/status"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "3 - Sanction screening for a natural person",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"countryOfResidenceCode\": \"GB\",\n    \"sanctionListCountryCode\": \"GB\",\n    \"name\": {\n      \"firstName\": \"Ersilio\",\n      \"surname\": \"TONINI\"\n    }\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "screening",
                                "1.0.0",
                                "sanctions",
                                "persons",
                                "status"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/screening/1.0.0/sanctions/persons/status"
                        }
                    },
                    "response": []
                },
                {
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "name": "4 - Sanction screening for an entity",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"countryOfRegistrationCode\": \"KP\",\n    \"sanctionListCountryCode\": \"GB\",\n    \"name\": \"BENTON SOLUTIONS LIMITED\"\n}"
                        },
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "method": "POST",
                        "url": {
                            "host": [
                                "{{apiUrlPrefix}}"
                            ],
                            "path": [
                                "zerocode",
                                "globalopenfinancechallenge.com",
                                "screening",
                                "1.0.0",
                                "sanctions",
                                "entities",
                                "status"
                            ],
                            "raw": "{{apiUrlPrefix}}/zerocode/globalopenfinancechallenge.com/screening/1.0.0/sanctions/entities/status"
                        }
                    },
                    "response": []
                }
            ],
            "name": "Getting started - Screening - v1"
        }
    ]
}